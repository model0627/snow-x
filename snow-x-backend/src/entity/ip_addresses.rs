//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "ip_addresses"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq, Serialize, Deserialize)]
pub struct Model {
    pub id: Uuid,
    pub ip_range_id: Uuid,
    #[sea_orm(column_type = "custom(\"INET\")")]
    pub ip_address: String,
    pub status: String,
    pub hostname: Option<String>,
    pub description: Option<String>,
    #[sea_orm(column_type = "custom(\"MACADDR\")")]
    pub mac_address: Option<String>,
    pub lease_start: Option<DateTimeWithTimeZone>,
    pub lease_end: Option<DateTimeWithTimeZone>,
    pub created_by: Uuid,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
    pub is_active: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IpRangeId,
    IpAddress,
    Status,
    Hostname,
    Description,
    MacAddress,
    LeaseStart,
    LeaseEnd,
    CreatedBy,
    CreatedAt,
    UpdatedAt,
    IsActive,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    IpRanges,
    Users,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::IpRangeId => ColumnType::Uuid.def(),
            Self::IpAddress => ColumnType::custom("inet").def(),
            Self::Status => ColumnType::String(StringLen::None).def(),
            Self::Hostname => ColumnType::String(StringLen::None).def().null(),
            Self::Description => ColumnType::Text.def().null(),
            Self::MacAddress => ColumnType::custom("macaddr").def().null(),
            Self::LeaseStart => ColumnType::TimestampWithTimeZone.def().null(),
            Self::LeaseEnd => ColumnType::TimestampWithTimeZone.def().null(),
            Self::CreatedBy => ColumnType::Uuid.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::UpdatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::IsActive => ColumnType::Boolean.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::IpRanges => Entity::belongs_to(super::ip_ranges::Entity)
                .from(Column::IpRangeId)
                .to(super::ip_ranges::Column::Id)
                .into(),
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::CreatedBy)
                .to(super::users::Column::Id)
                .into(),
        }
    }
}

impl Related<super::ip_ranges::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IpRanges.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
